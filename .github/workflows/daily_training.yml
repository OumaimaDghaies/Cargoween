name: Daily Model Training

on:
  schedule:
    - cron: '0 0 * * *'  # Minuit UTC
  workflow_dispatch:
  
permissions:
  contents: write
  
jobs:
  train-model:
    runs-on: ubuntu-latest
    env:
      MLFLOW_TRACKING_URI: http://localhost:5000
      DB_NAME: reservation
      COLLECTION_NAME: ListTransitaire

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install python-dotenv pymongo mlflow pymongo[srv]

    - name: Create MLflow directory
      run: mkdir -p mlruns

    - name: Start MLflow server (background)
      run: |
        mlflow server --backend-store-uri sqlite:///mlruns/mlflow.db --default-artifact-root ./mlruns --host 0.0.0.0 &
        sleep 5

    - name: Run training
      env:
        MONGO_URI: ${{ secrets.MONGO_URI }}
      run: |
        # Supprimer l'ancien modèle pour forcer la régénération
        if [ -f "best_model.pkl" ]; then
          rm -f best_model.pkl
          echo "Ancien modèle supprimé"
        fi
        
        # Exécuter l'entraînement avec vérification
        python train_model.py
        
        # Vérifier que le nouveau modèle a été créé
        if [ ! -f "best_model.pkl" ]; then
          echo "ERREUR: best_model.pkl n'a pas été généré"
          exit 1
        fi
        
        # Afficher les infos du fichier pour le debug
        ls -lh best_model.pkl
        stat best_model.pkl
    
    - name: Upload model artifact
      uses: actions/upload-artifact@v4
      with:
        name: trained-model-${{ github.run_id }}-${{ github.run_number }}
        path: best_model.pkl

    
    - name: Force push model update
      if: success()
      run: |
        # Vérifier que le modèle a bien été généré
        if [ ! -f "best_model.pkl" ]; then
          echo "Erreur : best_model.pkl n'existe pas!"
          exit 1
        fi
    
        # Configurer Git
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Forcer l'ajout du modèle et des backups
        git add -f best_model.pkl
        git add -f model_backups/
        
        # Créer un fichier metadata pour forcer un changement
        echo "Last update: $(date +'%Y-%m-%d %H:%M:%S')" > model_metadata.txt
        git add -f model_metadata.txt
        
        # Committer même si Git ne détecte pas de changement
        git commit --allow-empty -m "Model update $(date +'%Y-%m-%d %H:%M:%S')"
        
        # Pousser les changements
        git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
    
    - name: Send email notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_SENDER }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "Workflow ${{ github.workflow }} - ${{ job.status }}"
        html_body: |
          <p><strong>Statut</strong>: ${{ job.status }}</p>
          <p><strong>Dépôt</strong>: ${{ github.repository }}</p>
          <p><strong>Lien</strong>: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Voir le workflow</a></p>
        to: ${{ secrets.EMAIL_RECIPIENT }}
        from: GitHub Actions
        secure: true
