name: Daily Model Training and Monitoring

on:
  schedule:
    - cron: '0 0 * * *'  # Minuit UTC
  workflow_dispatch:
  
permissions:
  contents: write
  
jobs:
  train-model:
    runs-on: ubuntu-latest
    env:
      MLFLOW_TRACKING_URI: http://34.76.105.165:5000
      DB_NAME: reservation
      COLLECTION_NAME: ListTransitaire
      MODEL_VERSION: ${{ github.run_id }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install python-dotenv pymongo mlflow pymongo[srv] gitpython pandas matplotlib

    - name: Create MLflow directory
      run: mkdir -p mlruns

    - name: Start MLflow server (background)
      run: |
        mlflow server --backend-store-uri sqlite:///mlruns/mlflow.db --default-artifact-root ./mlruns --host 0.0.0.0 &
        sleep 5

    - name: Run training
      env:
        MONGO_URI: ${{ secrets.MONGO_URI }}
      run: |
        if [ -f "best_model.pkl" ]; then
          rm -f best_model.pkl
          echo "Ancien modèle supprimé"
        fi
        
        python train_model.py
        
        if [ ! -f "best_model.pkl" ]; then
          echo "ERREUR: best_model.pkl manquant"
          exit 1
        fi
        
        python -c "import joblib; print('=== METADONNEES ===', joblib.load('best_model.pkl')['metadata'])"

    - name: Generate MLflow Monitoring Report
      run: |
        python -c "
        import mlflow
        import pandas as pd
        import matplotlib.pyplot as plt
        from datetime import datetime
        
        # Connexion au serveur MLflow
        mlflow.set_tracking_uri('http://34.76.105.165:5000')
        
        # Récupérer tous les modèles
        experiments = mlflow.search_experiments()
        
        # Créer un DataFrame avec les métriques
        metrics_data = []
        for exp in experiments:
            runs = mlflow.search_runs(experiment_ids=[exp.experiment_id])
            for _, run in runs.iterrows():
                if 'metrics' in run:
                    metrics_data.append({
                        'experiment_id': exp.experiment_id,
                        'run_id': run.run_id,
                        'start_time': datetime.fromtimestamp(run.start_time/1000),
                        'model_name': run.tags.get('mlflow.runName', 'N/A'),
                        **run.metrics
                    })
        
        df = pd.DataFrame(metrics_data)
        
        # Générer des graphiques
        if not df.empty:
            # Graphique d'évolution des métriques
            plt.figure(figsize=(12, 6))
            for metric in ['accuracy', 'precision', 'recall', 'f1']:
                if metric in df.columns:
                    plt.plot(df['start_time'], df[metric], label=metric)
            plt.title('Evolution des métriques de performance')
            plt.xlabel('Date')
            plt.ylabel('Valeur')
            plt.legend()
            plt.grid()
            plt.savefig('metrics_evolution.png')
            plt.close()
            
            # Statistiques des modèles
            stats = df.describe().to_markdown()
            with open('model_stats.md', 'w') as f:
                f.write(f'# Statistiques des modèles\n\n{stats}')
        else:
            with open('model_stats.md', 'w') as f:
                f.write('# Aucun modèle trouvé dans MLflow')
        "

    - name: Upload Monitoring Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mlflow-monitoring-report
        path: |
          metrics_evolution.png
          model_stats.md

    - name: Push to GitHub
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add best_model.pkl model_backups/* metrics_evolution.png model_stats.md
        git commit -m "Update model and monitoring ${{ github.run_id }}"
        git push

    - name: Send email notification with monitoring
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_SENDER }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "Workflow ${{ github.workflow }} - ${{ job.status }}"
        html_body: |
          <p><strong>Statut</strong>: ${{ job.status }}</p>
          <p><strong>Dépôt</strong>: ${{ github.repository }}</p>
          <p><strong>Lien</strong>: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Voir le workflow</a></p>
          <p><strong>Monitoring MLflow</strong>:</p>
          <p>Évolution des métriques:</p>
          <img src="cid:metrics_evolution.png" alt="Évolution des métriques" style="max-width: 100%;">
          <p>Consultez les artefacts pour le rapport complet.</p>
        to: ${{ secrets.EMAIL_RECIPIENT }}
        from: GitHub Actions
        secure: true
        attach_files: |
          metrics_evolution.png
          model_stats.md
